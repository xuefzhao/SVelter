rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
x=x+1
score_unit=scores[c(1,x),]
score_matrix=data.frame(name=0,score=0)
rec=0
for(y in c(4:ncol(score_unit))){
if(is.na(score_unit[2,y])| score_unit[2,y]==0 | score_unit[2,y]=='')
{a=1}
else{
rec=rec+1
score_matrix[rec,1]=as.character(paste('Q',score_unit[1,y],',',sep=''))
score_matrix[rec,2]=as.character(score_unit[2,y])
}}
score_matrix[nrow(score_matrix)-1,1]='Score:'
score_matrix[nrow(score_matrix)-1,2]=paste(score_matrix[nrow(score_matrix)-1,2],'/50')
print(score_matrix,row.names=F,col.names=F)
print(score_unit[2,c(1,2)])
setwd('~/Box Sync/git-repo/svelter.xuefang.github/svelter/Run.Time.Evaluation/')
data_het=read.table('Simulate.het.Pseudo.ROC.Integrated.Stats')
data_het
dim(data_het)
i=1
strsplit(data[i,1],'_')[[1]][1]
data[i,1]
data_het=data_hetd
data=data_het
data[i,1]
strsplit(data[i,1],'_')
strsplit(as.character(data[i,1],'_'))
as.character(data[i,1],'_')
strsplit(as.factor(data[i,1],'_'))
strsplit(as.character(data[i,1]),sep='_')
strsplit(as.character(data[i,1]),'_')
strsplit(as.character(data[i,1]),'_')[[1]][1]
for(i in 1:nrow(data)){
data[i,8]=strsplit(as.character(data[i,1]),'_')[[1]][1]
}
data
data_reorganize<-function(data){
for(i in 1:nrow(data)){
data[i,8]=strsplit(as.character(data[i,1]),'_')[[1]][1]
}
return (data)
}
data_new=data_reorganize(data_het)
data_new
Het_Delly=data_new[data_new[,8]=='Delly,']
Het_Delly
data_new[,8]
Het_Delly=data_new[data_new[,8]=='Delly',]
Het_Delly
for(k1 in unique(Het_Delly[,3])){
temp1=Het_Delly[Het_Delly[,3]==k1,]
all_dups=temp1[temp1[,2]=='DUP',4]+temp1[temp1[,2]=='DUP_TANDEM',4]
total_dup_calls=temp1[temp1[,2]=='DUP',6]
Het_Delly[Het_Delly[,3]==k1 & Het_Delly[,2]=='DUP',8]=0
Het_Delly[Het_Delly[,3]==k1 & Het_Delly[,2]=='DUP_TANDEM',8]=all_dups/total_dup_calls
}
Het_Delly
unique(Het_Delly[,3])
data
data_reorganize<-function(data){
for(i in 1:nrow(data)){
data[i,8]=strsplit(as.character(data[i,1]),'_')[[1]][1]
data[i,9]=strsplit(as.character(data[i,1]),'_')[[1]][3]
}
return (data)
}
data_het=read.table('Simulate.het.Pseudo.ROC.Integrated.Stats')
data_new=data_reorganize(data_het)
Het_Delly=data_new[data_new[,8]=='Delly',]
Het_Delly
k1='RD10'
temp1=Het_Delly[Het_Delly[,9]==k1,]
temp1
all_dups=temp1[temp1[,2]=='DUP',4]+temp1[temp1[,2]=='DUP_TANDEM',4]
all_dups
temp1
temp1[temp1[,2]=='DUP',4]
data_reorganize<-function(data){
for(i in 1:nrow(data)){
data[i,8]=strsplit(as.character(data[i,1]),'_')[[1]][1]
data[i,9]=strsplit(as.character(data[i,1]),'_')[[1]][3]
}
data=data[,c(1,2,9,3,4,5,6,7,8)]
return (data)
}
data_het=read.table('Simulate.het.Pseudo.ROC.Integrated.Stats')
data_new=data_reorganize(data_het)
Het_Delly=data_new[data_new[,8]=='Delly',]
Het_Delly
for(i in 1:nrow(data)){
data[i,8]=strsplit(as.character(data[i,1]),'_')[[1]][1]
data[i,9]=strsplit(as.character(data[i,1]),'_')[[1]][3]
}
data=data[,c(1,2,9,3,4,5,6,7,8)]
data
data_reorganize<-function(data){
for(i in 1:nrow(data)){
data[i,8]=strsplit(as.character(data[i,1]),'_')[[1]][1]
data[i,9]=strsplit(as.character(data[i,1]),'_')[[1]][3]
}
data=data[,c(1,2,9,3,4,5,6,7,8)]
return (data)
}
data_het=read.table('Simulate.het.Pseudo.ROC.Integrated.Stats')
data_new=data_reorganize(data_het)
Het_Delly=data_new[data_new[,8]=='Delly',]
Het_Delly
data_new
Het_Delly=data_new[data_new[,9]=='Delly',]
看
k1
temp1=Het_Delly[Het_Delly[,3]==k1,]
all_dups=temp1[temp1[,2]=='DUP',4]+temp1[temp1[,2]=='DUP_TANDEM',4]
temp1
all_dups
temp1[temp1[,2]=='DUP',4]
temp1[temp1[,2]=='DUP_TANDEM',4]
temp1[temp1[,2]=='DUP',4]+temp1[temp1[,2]=='DUP_TANDEM',4]
unique(Het_Delly[,3]）
unique(Het_Delly[,3])
unique(Het_Delly[,8])
temp1[,2]
data_het=read.table('Simulate.het.Pseudo.ROC.Integrated.Stats')
data_new=data_reorganize(data_het)
Het_Delly=data_new[data_new[,9]=='Delly',]
data_het=read.table('Simulate.het.Pseudo.ROC.Integrated.Stats')
data_new=data_reorganize(data_het)
Het_Delly=data_new[data_new[,9]=='Delly',]
data_het=read.table('Simulate.het.Pseudo.ROC.Integrated.Stats')
data_new=data_reorganize(data_het)
Het_Delly=data_new[data_new[,9]=='Delly',]
data
all_dups=temp1[temp1[,2]=='DUP',4]
total_dup_calls=temp1[temp1[,2]=='DUP',6]
Het_Delly
